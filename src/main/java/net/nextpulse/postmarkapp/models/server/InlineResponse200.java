/*
 * Postmark API
 * Postmark makes sending and receiving email incredibly easy. 
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package net.nextpulse.postmarkapp.models.server;

import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.util.ArrayList;
import java.util.List;
import net.nextpulse.postmarkapp.models.server.InlineResponse200Days;

/**
 * InlineResponse200
 */
@javax.annotation.Generated(value = "class io.swagger.codegen.languages.JavaClientCodegen", date = "2017-02-24T16:43:29.220+01:00")
public class InlineResponse200 {
  @JsonProperty("HardBounce")
  private Integer hardBounce = null;

  @JsonProperty("SMTPApiError")
  private Integer sMTPApiError = null;

  @JsonProperty("SoftBounce")
  private Integer softBounce = null;

  @JsonProperty("Transient")
  private Integer _transient = null;

  @JsonProperty("Days")
  private List<InlineResponse200Days> days = new ArrayList<InlineResponse200Days>();

  public InlineResponse200 hardBounce(Integer hardBounce) {
    this.hardBounce = hardBounce;
    return this;
  }

   /**
   * Get hardBounce
   * @return hardBounce
  **/
  @ApiModelProperty(example = "null", value = "")
  public Integer getHardBounce() {
    return hardBounce;
  }

  public void setHardBounce(Integer hardBounce) {
    this.hardBounce = hardBounce;
  }

  public InlineResponse200 sMTPApiError(Integer sMTPApiError) {
    this.sMTPApiError = sMTPApiError;
    return this;
  }

   /**
   * Get sMTPApiError
   * @return sMTPApiError
  **/
  @ApiModelProperty(example = "null", value = "")
  public Integer getSMTPApiError() {
    return sMTPApiError;
  }

  public void setSMTPApiError(Integer sMTPApiError) {
    this.sMTPApiError = sMTPApiError;
  }

  public InlineResponse200 softBounce(Integer softBounce) {
    this.softBounce = softBounce;
    return this;
  }

   /**
   * Get softBounce
   * @return softBounce
  **/
  @ApiModelProperty(example = "null", value = "")
  public Integer getSoftBounce() {
    return softBounce;
  }

  public void setSoftBounce(Integer softBounce) {
    this.softBounce = softBounce;
  }

  public InlineResponse200 _transient(Integer _transient) {
    this._transient = _transient;
    return this;
  }

   /**
   * Get _transient
   * @return _transient
  **/
  @ApiModelProperty(example = "null", value = "")
  public Integer getTransient() {
    return _transient;
  }

  public void setTransient(Integer _transient) {
    this._transient = _transient;
  }

  public InlineResponse200 days(List<InlineResponse200Days> days) {
    this.days = days;
    return this;
  }

  public InlineResponse200 addDaysItem(InlineResponse200Days daysItem) {
    this.days.add(daysItem);
    return this;
  }

   /**
   * Get days
   * @return days
  **/
  @ApiModelProperty(example = "null", value = "")
  public List<InlineResponse200Days> getDays() {
    return days;
  }

  public void setDays(List<InlineResponse200Days> days) {
    this.days = days;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    InlineResponse200 inlineResponse200 = (InlineResponse200) o;
    return Objects.equals(this.hardBounce, inlineResponse200.hardBounce) &&
        Objects.equals(this.sMTPApiError, inlineResponse200.sMTPApiError) &&
        Objects.equals(this.softBounce, inlineResponse200.softBounce) &&
        Objects.equals(this._transient, inlineResponse200._transient) &&
        Objects.equals(this.days, inlineResponse200.days);
  }

  @Override
  public int hashCode() {
    return Objects.hash(hardBounce, sMTPApiError, softBounce, _transient, days);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class InlineResponse200 {\n");
    
    sb.append("    hardBounce: ").append(toIndentedString(hardBounce)).append("\n");
    sb.append("    sMTPApiError: ").append(toIndentedString(sMTPApiError)).append("\n");
    sb.append("    softBounce: ").append(toIndentedString(softBounce)).append("\n");
    sb.append("    _transient: ").append(toIndentedString(_transient)).append("\n");
    sb.append("    days: ").append(toIndentedString(days)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
  
}

