/*
 * Postmark API
 * Postmark makes sending and receiving email incredibly easy. 
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package net.nextpulse.postmarkapp.models.server;

import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;

/**
 * TemplateValidationRequest
 */
@javax.annotation.Generated(value = "class io.swagger.codegen.languages.JavaClientCodegen", date = "2017-02-24T16:43:29.220+01:00")
public class TemplateValidationRequest {
  @JsonProperty("Subject")
  private String subject = null;

  @JsonProperty("HtmlBody")
  private String htmlBody = null;

  @JsonProperty("TextBody")
  private String textBody = null;

  @JsonProperty("TextRenderModel")
  private Object textRenderModel = null;

  @JsonProperty("InlineCssForHtmlTestRender")
  private Boolean inlineCssForHtmlTestRender = true;

  public TemplateValidationRequest subject(String subject) {
    this.subject = subject;
    return this;
  }

   /**
   * The subject content to validate. Must be specified if HtmlBody or TextBody are not. See our template language documentation for more information on the syntax for this field. 
   * @return subject
  **/
  @ApiModelProperty(example = "null", value = "The subject content to validate. Must be specified if HtmlBody or TextBody are not. See our template language documentation for more information on the syntax for this field. ")
  public String getSubject() {
    return subject;
  }

  public void setSubject(String subject) {
    this.subject = subject;
  }

  public TemplateValidationRequest htmlBody(String htmlBody) {
    this.htmlBody = htmlBody;
    return this;
  }

   /**
   * The html body content to validate. Must be specified if Subject or TextBody are not. See our template language documentation for more information on the syntax for this field. 
   * @return htmlBody
  **/
  @ApiModelProperty(example = "null", value = "The html body content to validate. Must be specified if Subject or TextBody are not. See our template language documentation for more information on the syntax for this field. ")
  public String getHtmlBody() {
    return htmlBody;
  }

  public void setHtmlBody(String htmlBody) {
    this.htmlBody = htmlBody;
  }

  public TemplateValidationRequest textBody(String textBody) {
    this.textBody = textBody;
    return this;
  }

   /**
   * The text body content to validate. Must be specified if HtmlBody or Subject are not. See our template language documentation for more information on the syntax for this field. 
   * @return textBody
  **/
  @ApiModelProperty(example = "null", value = "The text body content to validate. Must be specified if HtmlBody or Subject are not. See our template language documentation for more information on the syntax for this field. ")
  public String getTextBody() {
    return textBody;
  }

  public void setTextBody(String textBody) {
    this.textBody = textBody;
  }

  public TemplateValidationRequest textRenderModel(Object textRenderModel) {
    this.textRenderModel = textRenderModel;
    return this;
  }

   /**
   * The model to be used when rendering test content.
   * @return textRenderModel
  **/
  @ApiModelProperty(example = "null", value = "The model to be used when rendering test content.")
  public Object getTextRenderModel() {
    return textRenderModel;
  }

  public void setTextRenderModel(Object textRenderModel) {
    this.textRenderModel = textRenderModel;
  }

  public TemplateValidationRequest inlineCssForHtmlTestRender(Boolean inlineCssForHtmlTestRender) {
    this.inlineCssForHtmlTestRender = inlineCssForHtmlTestRender;
    return this;
  }

   /**
   * When HtmlBody is specified, the test render will have style blocks inlined as style attributes on matching html elements. You may disable the css inlining behavior by passing false for this parameter. 
   * @return inlineCssForHtmlTestRender
  **/
  @ApiModelProperty(example = "null", value = "When HtmlBody is specified, the test render will have style blocks inlined as style attributes on matching html elements. You may disable the css inlining behavior by passing false for this parameter. ")
  public Boolean getInlineCssForHtmlTestRender() {
    return inlineCssForHtmlTestRender;
  }

  public void setInlineCssForHtmlTestRender(Boolean inlineCssForHtmlTestRender) {
    this.inlineCssForHtmlTestRender = inlineCssForHtmlTestRender;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TemplateValidationRequest templateValidationRequest = (TemplateValidationRequest) o;
    return Objects.equals(this.subject, templateValidationRequest.subject) &&
        Objects.equals(this.htmlBody, templateValidationRequest.htmlBody) &&
        Objects.equals(this.textBody, templateValidationRequest.textBody) &&
        Objects.equals(this.textRenderModel, templateValidationRequest.textRenderModel) &&
        Objects.equals(this.inlineCssForHtmlTestRender, templateValidationRequest.inlineCssForHtmlTestRender);
  }

  @Override
  public int hashCode() {
    return Objects.hash(subject, htmlBody, textBody, textRenderModel, inlineCssForHtmlTestRender);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TemplateValidationRequest {\n");
    
    sb.append("    subject: ").append(toIndentedString(subject)).append("\n");
    sb.append("    htmlBody: ").append(toIndentedString(htmlBody)).append("\n");
    sb.append("    textBody: ").append(toIndentedString(textBody)).append("\n");
    sb.append("    textRenderModel: ").append(toIndentedString(textRenderModel)).append("\n");
    sb.append("    inlineCssForHtmlTestRender: ").append(toIndentedString(inlineCssForHtmlTestRender)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
  
}

