/*
 * Postmark API
 * Postmark makes sending and receiving email incredibly easy. 
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package net.nextpulse.postmarkapp.models.server;

import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.util.ArrayList;
import java.util.List;
import net.nextpulse.postmarkapp.models.server.TemplateValidationError;

/**
 * TemplateValidationResult
 */
@javax.annotation.Generated(value = "class io.swagger.codegen.languages.JavaClientCodegen", date = "2017-02-24T16:43:29.220+01:00")
public class TemplateValidationResult {
  @JsonProperty("ContentIsValid")
  private Boolean contentIsValid = null;

  @JsonProperty("ValidationErrors")
  private List<TemplateValidationError> validationErrors = new ArrayList<TemplateValidationError>();

  @JsonProperty("RenderedContent")
  private String renderedContent = null;

  public TemplateValidationResult contentIsValid(Boolean contentIsValid) {
    this.contentIsValid = contentIsValid;
    return this;
  }

   /**
   * Get contentIsValid
   * @return contentIsValid
  **/
  @ApiModelProperty(example = "null", value = "")
  public Boolean getContentIsValid() {
    return contentIsValid;
  }

  public void setContentIsValid(Boolean contentIsValid) {
    this.contentIsValid = contentIsValid;
  }

  public TemplateValidationResult validationErrors(List<TemplateValidationError> validationErrors) {
    this.validationErrors = validationErrors;
    return this;
  }

  public TemplateValidationResult addValidationErrorsItem(TemplateValidationError validationErrorsItem) {
    this.validationErrors.add(validationErrorsItem);
    return this;
  }

   /**
   * Get validationErrors
   * @return validationErrors
  **/
  @ApiModelProperty(example = "null", value = "")
  public List<TemplateValidationError> getValidationErrors() {
    return validationErrors;
  }

  public void setValidationErrors(List<TemplateValidationError> validationErrors) {
    this.validationErrors = validationErrors;
  }

  public TemplateValidationResult renderedContent(String renderedContent) {
    this.renderedContent = renderedContent;
    return this;
  }

   /**
   * Get renderedContent
   * @return renderedContent
  **/
  @ApiModelProperty(example = "null", value = "")
  public String getRenderedContent() {
    return renderedContent;
  }

  public void setRenderedContent(String renderedContent) {
    this.renderedContent = renderedContent;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TemplateValidationResult templateValidationResult = (TemplateValidationResult) o;
    return Objects.equals(this.contentIsValid, templateValidationResult.contentIsValid) &&
        Objects.equals(this.validationErrors, templateValidationResult.validationErrors) &&
        Objects.equals(this.renderedContent, templateValidationResult.renderedContent);
  }

  @Override
  public int hashCode() {
    return Objects.hash(contentIsValid, validationErrors, renderedContent);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TemplateValidationResult {\n");
    
    sb.append("    contentIsValid: ").append(toIndentedString(contentIsValid)).append("\n");
    sb.append("    validationErrors: ").append(toIndentedString(validationErrors)).append("\n");
    sb.append("    renderedContent: ").append(toIndentedString(renderedContent)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
  
}

